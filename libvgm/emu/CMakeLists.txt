#### Sound Emulation Library ####
project(vgm-emu)

set(EMU_PC_CFLAGS)
set(EMU_PC_LDFLAGS)


# Note: If multiple cores are present for a device, the core chosed by default is marked with *.

option(SNDEMU__ALL "build all sound devices (overrides other selections)" ON)
option(SNDEMU_SN76496_ALL "Sound Device SN76496: all cores" OFF)
option(SNDEMU_SN76496_MAME "Sound Device SN76496: MAME core*" OFF)
option(SNDEMU_SN76496_MAXIM "Sound Device SN76496: Maxim core" OFF)
option(SNDEMU_YM2413_ALL "Sound Device YM2413: all cores" OFF)
option(SNDEMU_YM2413_MAME "Sound Device YM2413: MAME core" OFF)
option(SNDEMU_YM2413_EMU "Sound Device YM2413: EMU2413 core*" OFF)
option(SNDEMU_YM2413_NUKED "Sound Device YM2413: Nuked OPLL core" OFF)
option(SNDEMU_YM2612_ALL "Sound Device YM2612: all cores" OFF)
option(SNDEMU_YM2612_GPGX "Sound Device YM2612: MAME/Genesis Plus GX core*" OFF)
option(SNDEMU_YM2612_GENS "Sound Device YM2612: Gens core" OFF)
option(SNDEMU_YM2612_NUKED "Sound Device YM2612: Nuked OPN2 core" OFF)
option(SNDEMU_YM2151_ALL "Sound Device YM2151: all cores" OFF)
option(SNDEMU_YM2151_MAME "Sound Device YM2151: MAME core*" OFF)
option(SNDEMU_YM2151_NUKED "Sound Device YM2151: Nuked OPM core" OFF)
option(SNDEMU_SEGAPCM_ALL "Sound Device SegaPCM: all cores" OFF)
option(SNDEMU_RF5C68_ALL "Sound Device RF5C68: all cores" OFF)
option(SNDEMU_RF5C68_MAME "Sound Device RF5C68: MAME core*" OFF)
option(SNDEMU_RF5C68_GENS "Sound Device RF5C68: Gens core" OFF)
option(SNDEMU_YM2203_ALL "Sound Device YM2203: all cores (Note: requires AY8910)" OFF)
option(SNDEMU_YM2608_ALL "Sound Device YM2608: all cores (Note: requires AY8910)" OFF)
option(SNDEMU_YM2610_ALL "Sound Device YM2610: all cores (Note: requires AY8910)" OFF)
option(SNDEMU_YM3812_ALL "Sound Device YM3812: all cores" OFF)
option(SNDEMU_YM3812_MAME "Sound Device YM3812: MAME core" OFF)
option(SNDEMU_YM3812_ADLIBEMU "Sound Device YM3812: AdLibEmu core*" OFF)
option(SNDEMU_YM3812_NUKED "Sound Device YM3812: Nuked OPL3 core" OFF)
option(SNDEMU_YM3526_ALL "Sound Device YM3526: all cores" OFF)
option(SNDEMU_Y8950_ALL "Sound Device Y8950: all cores" OFF)
option(SNDEMU_YMF262_ALL "Sound Device YMF262: all cores" OFF)
option(SNDEMU_YMF262_MAME "Sound Device YMF262: MAME core" OFF)
option(SNDEMU_YMF262_ADLIBEMU "Sound Device YMF262: AdLibEmu core*" OFF)
option(SNDEMU_YMF262_NUKED "Sound Device YMF262: Nuked OPL3 core" OFF)
option(SNDEMU_YMF278B_ALL "Sound Device YMF278B: all cores (Note: requires YMF262)" OFF)
option(SNDEMU_YMZ280B_ALL "Sound Device YMZ280B: all cores" OFF)
option(SNDEMU_YMF271_ALL "Sound Device YMF271: all cores" OFF)
option(SNDEMU_AY8910_ALL "Sound Device AY8910: all cores" OFF)
option(SNDEMU_AY8910_MAME "Sound Device AY8910: MAME core" OFF)
option(SNDEMU_AY8910_EMU "Sound Device AY8910: EMU2149 core*" OFF)
option(SNDEMU_32X_PWM_ALL "Sound Device PWM: all cores" OFF)
option(SNDEMU_GAMEBOY_ALL "Sound Device GameBoy DMG: all cores" OFF)
option(SNDEMU_NESAPU_ALL "Sound Device NES APU: all cores" OFF)
option(SNDEMU_NESAPU_MAME "Sound Device NES APU: MAME core" OFF)
option(SNDEMU_NESAPU_NSFPLAY "Sound Device NES APU: NSFPlay core*" OFF)
option(SNDEMU_NESAPU_FDS "Sound Device NES APU: NSFPlay FDS core* (useable with both APU cores)" OFF)
option(SNDEMU_YMW258_ALL "Sound Device YMW258: all cores" OFF)
option(SNDEMU_UPD7759_ALL "Sound Device uPD7759: all cores" OFF)
option(SNDEMU_OKIM6258_ALL "Sound Device OKI MSM6258: all cores" OFF)
option(SNDEMU_OKIM6295_ALL "Sound Device OKI MSM6295: all cores" OFF)
option(SNDEMU_K051649_ALL "Sound Device K051649: all cores" OFF)
option(SNDEMU_K054539_ALL "Sound Device K054539: all cores" OFF)
option(SNDEMU_C6280_ALL "Sound Device HuC6280: all cores" OFF)
option(SNDEMU_C6280_MAME "Sound Device HuC6280: MAME core" OFF)
option(SNDEMU_C6280_OOTAKE "Sound Device HuC6280: Ootake core*" OFF)
option(SNDEMU_C140_ALL "Sound Device C140: all cores" OFF)
option(SNDEMU_C219_ALL "Sound Device C219: all cores" OFF)
option(SNDEMU_K053260_ALL "Sound Device K053260: all cores" OFF)
option(SNDEMU_POKEY_ALL "Sound Device POKEY: all cores" OFF)
option(SNDEMU_QSOUND_ALL "Sound Device QSound: all cores" OFF)
option(SNDEMU_QSOUND_MAME "Sound Device QSound: MAME core" OFF)
option(SNDEMU_QSOUND_CTR "Sound Device QSound: superctr core*" OFF)
option(SNDEMU_SCSP_ALL "Sound Device SCSP: all cores" OFF)
option(SNDEMU_WSWAN_ALL "Sound Device WonderSwan: all cores" OFF)
option(SNDEMU_VBOY_VSU_ALL "Sound Device VirutalBoy VSU: all cores" OFF)
option(SNDEMU_SAA1099_ALL "Sound Device SAA1099: all cores" OFF)
option(SNDEMU_SAA1099_MAME "Sound Device SAA1099: MAME core*" OFF)
#option(SNDEMU_SAA1099_NRS "Sound Device SAA1099: NewRisingSun core" OFF)
option(SNDEMU_SAA1099_VB "Sound Device SAA1099: Valley Bell core" OFF)
option(SNDEMU_ES5503_ALL "Sound Device ES5503: all cores" OFF)
option(SNDEMU_ES5506_ALL "Sound Device ES5505/ES5506: all cores" OFF)
option(SNDEMU_X1_010_ALL "Sound Device X1-010: all cores" OFF)
option(SNDEMU_C352_ALL "Sound Device C352: all cores" OFF)
option(SNDEMU_GA20_ALL "Sound Device Irem GA20: all cores" OFF)
option(SNDEMU_MIKEY_ALL "Sound Device Mikey: all cores" OFF)

# console/computer presets
option(SNDEMU__PRESET_SMS "Sound Dev. Preset: Sega Master System/Game Gear" OFF)
option(SNDEMU__PRESET_SMD "Sound Dev. Preset: Sega MegaDrive (with CD/32X)" OFF)
option(SNDEMU__PRESET_MSX "Sound Dev. Preset: MSX (with extensions)" OFF)
option(SNDEMU__PRESET_S98 "Sound Dev. Preset: S98 logs" OFF)
option(SNDEMU__PRESET_NES "Sound Dev. Preset: NES/Famicom (with extensions)" OFF)
option(SNDEMU__PRESET_IBM_PC "Sound Dev. Preset: IBM PC (Tandy/CMS/Sound Blaster)" OFF)


# enable sound device selection
set(EMU_DEFS "SNDDEV_SELECT")


#### general enable-all option ####
if(SNDEMU__ALL)
	# turn all devices on
	set(SNDEMU_SN76496_ALL ON)
	set(SNDEMU_YM2413_ALL ON)
	set(SNDEMU_YM2612_ALL ON)
	set(SNDEMU_YM2151_ALL ON)
	set(SNDEMU_SEGAPCM_ALL ON)
	set(SNDEMU_RF5C68_ALL ON)
	set(SNDEMU_YM2203_ALL ON)
	set(SNDEMU_YM2608_ALL ON)
	set(SNDEMU_YM2610_ALL ON)
	set(SNDEMU_YM3812_ALL ON)
	set(SNDEMU_YM3526_ALL ON)
	set(SNDEMU_Y8950_ALL ON)
	set(SNDEMU_YMF262_ALL ON)
	set(SNDEMU_YMF278B_ALL ON)
	set(SNDEMU_YMZ280B_ALL ON)
	set(SNDEMU_YMF271_ALL ON)
	set(SNDEMU_AY8910_ALL ON)
	set(SNDEMU_32X_PWM_ALL ON)
	set(SNDEMU_GAMEBOY_ALL ON)
	set(SNDEMU_NESAPU_ALL ON)
	set(SNDEMU_YMW258_ALL ON)
	set(SNDEMU_UPD7759_ALL ON)
	set(SNDEMU_OKIM6258_ALL ON)
	set(SNDEMU_OKIM6295_ALL ON)
	set(SNDEMU_K051649_ALL ON)
	set(SNDEMU_K054539_ALL ON)
	set(SNDEMU_C6280_ALL ON)
	set(SNDEMU_C140_ALL ON)
	set(SNDEMU_C219_ALL ON)
	set(SNDEMU_K053260_ALL ON)
	set(SNDEMU_POKEY_ALL ON)
	set(SNDEMU_QSOUND_ALL ON)
	set(SNDEMU_SCSP_ALL ON)
	set(SNDEMU_WSWAN_ALL ON)
	set(SNDEMU_VBOY_VSU_ALL ON)
	set(SNDEMU_SAA1099_ALL ON)
	set(SNDEMU_ES5503_ALL ON)
	set(SNDEMU_ES5506_ALL ON)
	set(SNDEMU_X1_010_ALL ON)
	set(SNDEMU_C352_ALL ON)
	set(SNDEMU_GA20_ALL ON)
	set(SNDEMU_MIKEY_ALL ON)
endif()


#### presets for specific machines ####
if(SNDEMU__PRESET_SMS)
	set(SNDEMU_SN76496_ALL ON)
	set(SNDEMU_YM2413_ALL ON)	# Sega Mark III FM Sound Unit
endif()
if(SNDEMU__PRESET_SMD)
	set(SNDEMU_YM2612_ALL ON)
	set(SNDEMU_SN76496_ALL ON)
	set(SNDEMU_RF5C68_ALL ON)	# MegaCD
	set(SNDEMU_32X_PWM_ALL ON)	# Sega 32X
endif()
if(SNDEMU__PRESET_MSX)
	set(SNDEMU_AY8910_ALL ON)
	set(SNDEMU_Y8950_ALL ON)	# MSX-AUDIO
	set(SNDEMU_YM2413_ALL ON)	# MSX-MUSIC/FM-PAC
	set(SNDEMU_K051649_ALL ON)	# SCC/SCC+
	set(SNDEMU_YMF278B_ALL ON)	# MoonSound
	set(SNDEMU_YMF262_ALL ON)	# MoonSound (FM-part)
	set(SNDEMU_YM2151_ALL ON)	# Yamaha SFG-05
endif()
if(SNDEMU__PRESET_S98)
	set(SNDEMU_AY8910_ALL ON)	# PSG (device 1, 15)
	set(SNDEMU_YM2203_ALL ON)	# OPN (device 2)
	set(SNDEMU_YM2612_ALL ON)	# OPN2 (device 3)
	set(SNDEMU_YM2608_ALL ON)	# OPNA (device 4)
	set(SNDEMU_YM2151_ALL ON)	# OPM (device 5)
	set(SNDEMU_YM2413_ALL ON)	# OPLL (device 6)
	set(SNDEMU_YM3526_ALL ON)	# OPL (device 7)
	set(SNDEMU_YM3812_ALL ON)	# OPL2 (device 8)
	set(SNDEMU_YMF262_ALL ON)	# OPL3 (device 9)
	set(SNDEMU_SN76496_ALL ON)	# DCSG (device 16)
endif()
if(SNDEMU__PRESET_NES)
	set(SNDEMU_NESAPU_ALL ON)
	set(SNDEMU_YM2413_ALL ON)	# VRC7
	set(SNDEMU_AY8910_ALL ON)	# Sunsoft 5B
endif()
if(SNDEMU__PRESET_IBM_PC)
	set(SNDEMU_SN76496_ALL ON)	# Tandy
	set(SNDEMU_SAA1099_ALL ON)	# CMS / Game Blaster
	set(SNDEMU_YM3812_ALL ON)	# AdLib / Sound Blaster 1/2
	set(SNDEMU_YMF262_ALL ON)	# Sound Blaster Pro 2/16
endif()


#### sound device enable-all options ####
if(SNDEMU_SN76496_ALL)
	set(SNDEMU_SN76496_MAME ON)
	set(SNDEMU_SN76496_MAXIM ON)
endif()
if(SNDEMU_YM2413_ALL)
	set(SNDEMU_YM2413_MAME ON)
	set(SNDEMU_YM2413_EMU ON)
	set(SNDEMU_YM2413_NUKED ON)
endif()
if(SNDEMU_YM2612_ALL)
	set(SNDEMU_YM2612_GPGX ON)
	set(SNDEMU_YM2612_GENS ON)
	set(SNDEMU_YM2612_NUKED ON)
endif()
if(SNDEMU_YM2151_ALL)
	set(SNDEMU_YM2151_MAME ON)
	set(SNDEMU_YM2151_NUKED ON)
endif()
if(SNDEMU_RF5C68_ALL)
	set(SNDEMU_RF5C68_MAME ON)
	set(SNDEMU_RF5C68_GENS ON)
endif()
if(SNDEMU_YM3812_ALL)
	set(SNDEMU_YM3812_MAME ON)
	set(SNDEMU_YM3812_ADLIBEMU ON)
	set(SNDEMU_YM3812_NUKED ON)
endif()
if(SNDEMU_YMF262_ALL)
	set(SNDEMU_YMF262_MAME ON)
	set(SNDEMU_YMF262_ADLIBEMU ON)
	set(SNDEMU_YMF262_NUKED ON)
endif()
if(SNDEMU_AY8910_ALL)
	set(SNDEMU_AY8910_MAME ON)
	set(SNDEMU_AY8910_EMU ON)
endif()
if(SNDEMU_NESAPU_ALL)
	set(SNDEMU_NESAPU_MAME ON)
	set(SNDEMU_NESAPU_NSFPLAY ON)
	set(SNDEMU_NESAPU_FDS ON)
endif()
if(SNDEMU_C6280_ALL)
	set(SNDEMU_C6280_MAME ON)
	set(SNDEMU_C6280_OOTAKE ON)
endif()
if(SNDEMU_QSOUND_ALL)
	set(SNDEMU_QSOUND_MAME ON)
	set(SNDEMU_QSOUND_CTR ON)
endif()
if(SNDEMU_SAA1099_ALL)
	set(SNDEMU_SAA1099_MAME ON)
	set(SNDEMU_SAA1099_NRS ON)
	set(SNDEMU_SAA1099_VB ON)
endif()


set(EMU_FILES
	SoundEmu.c
	Resampler.c
	logging.c
	panning.c
	dac_control.c
)
# export headers
set(EMU_HEADERS
	snddef.h
	EmuStructs.h
	SoundEmu.h
	SoundDevs.h
	EmuCores.h
	Resampler.h
	logging.h
	dac_control.h
)
set(EMU_CORE_HEADERS)

if(SNDEMU_SN76496_MAME OR SNDEMU_SN76496_MAXIM)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_SN76496")
	set(EMU_FILES ${EMU_FILES} cores/sn764intf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/sn764intf.h)
	if(SNDEMU_SN76496_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_SN76496_MAME")
		set(EMU_FILES ${EMU_FILES} cores/sn76496.c)
	endif()
	if(SNDEMU_SN76496_MAXIM)
		set(EMU_DEFS ${EMU_DEFS} " EC_SN76496_MAXIM")
		set(EMU_FILES ${EMU_FILES} cores/sn76489.c)
	endif()
endif()
if(SNDEMU_YM2413_MAME OR SNDEMU_YM2413_EMU OR SNDEMU_YM2413_NUKED)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM2413")
	set(EMU_FILES ${EMU_FILES} cores/2413intf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/2413intf.h)
	if(SNDEMU_YM2413_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2413_MAME")
		set(EMU_FILES ${EMU_FILES} cores/ym2413.c)
	endif()
	if(SNDEMU_YM2413_EMU)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2413_EMU2413")
		set(EMU_FILES ${EMU_FILES} cores/emu2413.c)
	endif()
	if(SNDEMU_YM2413_NUKED)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2413_NUKED")
		set(EMU_FILES ${EMU_FILES} cores/nukedopll.c)
	endif()
endif()
if(SNDEMU_YM2612_GPGX OR SNDEMU_YM2612_GENS OR SNDEMU_YM2612_NUKED)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM2612")
	set(EMU_FILES ${EMU_FILES} cores/2612intf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/2612intf.h)
	if(SNDEMU_YM2612_GPGX)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2612_GPGX")
		set(EMU_FILES ${EMU_FILES} cores/fmopn.c)
	endif()
	if(SNDEMU_YM2612_GENS)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2612_GENS")
		set(EMU_FILES ${EMU_FILES} cores/ym2612.c)
	endif()
	if(SNDEMU_YM2612_NUKED)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2612_NUKED")
		set(EMU_FILES ${EMU_FILES} cores/ym3438.c)
	endif()
endif()
if(SNDEMU_YM2151_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM2151")
	set(EMU_FILES ${EMU_FILES} cores/ym2151.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/ym2151.h)
endif()
if(SNDEMU_YM2151_MAME OR SNDEMU_YM2151_NUKED)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM2151")
	set(EMU_FILES ${EMU_FILES} cores/2151intf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/2151intf.h)
	if(SNDEMU_YM2151_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2151_MAME")
		set(EMU_FILES ${EMU_FILES} cores/ym2151.c)
	endif()
	if(SNDEMU_YM2151_NUKED)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM2151_NUKED")
		set(EMU_FILES ${EMU_FILES} cores/nukedopm.c)
	endif()
endif()
if(SNDEMU_SEGAPCM_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_SEGAPCM")
	set(EMU_FILES ${EMU_FILES} cores/segapcm.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/segapcm.h)
endif()
if(SNDEMU_RF5C68_MAME OR SNDEMU_RF5C68_GENS)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_RF5C68")
	set(EMU_FILES ${EMU_FILES} cores/rf5cintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/rf5cintf.h)
	if(SNDEMU_RF5C68_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_RF5C68_MAME")
		set(EMU_FILES ${EMU_FILES} cores/rf5c68.c)
	endif()
	if(SNDEMU_RF5C68_GENS)
		set(EMU_DEFS ${EMU_DEFS} " EC_RF5C68_GENS")
		set(EMU_FILES ${EMU_FILES} cores/scd_pcm.c)
	endif()
endif()
if(SNDEMU_YM2203_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM2203")
	set(EMU_FILES ${EMU_FILES} cores/opnintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/opnintf.h)
	set(EMU_FILES ${EMU_FILES} cores/fmopn.c)
endif()
if(SNDEMU_YM2608_ALL OR SNDEMU_YM2610_ALL)
	if(SNDEMU_YM2608_ALL)
		set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM2608")
	endif()
	if(SNDEMU_YM2610_ALL)
		set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM2610")
	endif()
	set(EMU_FILES ${EMU_FILES} cores/opnintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/opnintf.h)
	set(EMU_FILES ${EMU_FILES} cores/fmopn.c)
	set(EMU_FILES ${EMU_FILES} cores/ymdeltat.c)
endif()
if(SNDEMU_YM3812_MAME OR SNDEMU_YM3812_ADLIBEMU OR SNDEMU_YM3812_NUKED)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM3812")
	set(EMU_FILES ${EMU_FILES} cores/oplintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/oplintf.h)
	if(SNDEMU_YM3812_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM3812_MAME")
		set(EMU_FILES ${EMU_FILES} cores/fmopl.c)
	endif()
	if(SNDEMU_YM3812_ADLIBEMU)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM3812_ADLIBEMU")
		set(EMU_FILES ${EMU_FILES} cores/adlibemu_opl2.c)
	endif()
	if(SNDEMU_YM3812_NUKED)
		set(EMU_DEFS ${EMU_DEFS} " EC_YM3812_NUKED")
		set(EMU_FILES ${EMU_FILES} cores/nukedopl3.c)
	endif()
endif()
if(SNDEMU_YM3526_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YM3526")
	set(EMU_FILES ${EMU_FILES} cores/oplintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/oplintf.h)
	set(EMU_FILES ${EMU_FILES} cores/fmopl.c)
endif()
if(SNDEMU_Y8950_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_Y8950")
	set(EMU_FILES ${EMU_FILES} cores/oplintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/oplintf.h)
	set(EMU_FILES ${EMU_FILES} cores/fmopl.c)
	set(EMU_FILES ${EMU_FILES} cores/ymdeltat.c)
endif()
if(SNDEMU_YMF262_MAME OR SNDEMU_YMF262_ADLIBEMU OR SNDEMU_YMF262_NUKED)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YMF262")
	set(EMU_FILES ${EMU_FILES} cores/262intf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/262intf.h)
	if(SNDEMU_YMF262_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_YMF262_MAME")
		set(EMU_FILES ${EMU_FILES} cores/ymf262.c)
	endif()
	if(SNDEMU_YMF262_ADLIBEMU)
		set(EMU_DEFS ${EMU_DEFS} " EC_YMF262_ADLIBEMU")
		set(EMU_FILES ${EMU_FILES} cores/adlibemu_opl3.c)
	endif()
	if(SNDEMU_YMF262_NUKED)
		set(EMU_DEFS ${EMU_DEFS} " EC_YMF262_NUKED")
		set(EMU_FILES ${EMU_FILES} cores/nukedopl3.c)
	endif()
endif()
if(SNDEMU_YMF278B_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YMF278B")
	set(EMU_FILES ${EMU_FILES} cores/ymf278b.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/ymf278b.h)
endif()
if(SNDEMU_YMZ280B_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YMZ280B")
	set(EMU_FILES ${EMU_FILES} cores/ymz280b.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/ymz280b.h)
endif()
if(SNDEMU_YMF271_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YMF271")
	set(EMU_FILES ${EMU_FILES} cores/ymf271.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/ymf271.h)
endif()
if(SNDEMU_AY8910_MAME OR SNDEMU_AY8910_EMU)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_AY8910")
	set(EMU_FILES ${EMU_FILES} cores/ayintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/ayintf.h)
	if(SNDEMU_AY8910_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_AY8910_MAME")
		set(EMU_FILES ${EMU_FILES} cores/ay8910.c)
	endif()
	if(SNDEMU_AY8910_EMU)
		set(EMU_DEFS ${EMU_DEFS} " EC_AY8910_EMU2149")
		set(EMU_FILES ${EMU_FILES} cores/emu2149.c)
	endif()
endif()
if(SNDEMU_32X_PWM_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_32X_PWM")
	set(EMU_FILES ${EMU_FILES} cores/pwm.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/pwm.h)
endif()
if(SNDEMU_GAMEBOY_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_GAMEBOY")
	set(EMU_FILES ${EMU_FILES} cores/gb.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/gb.h)
endif()
if(SNDEMU_NESAPU_MAME OR SNDEMU_NESAPU_NSFPLAY)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_NES_APU")
	set(EMU_FILES ${EMU_FILES} cores/nesintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/nesintf.h)
	if(SNDEMU_NESAPU_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_NES_MAME")
		set(EMU_FILES ${EMU_FILES} cores/nes_apu.c)
	endif()
	if(SNDEMU_NESAPU_NSFPLAY)
		set(EMU_DEFS ${EMU_DEFS} " EC_NES_NSFPLAY")
		set(EMU_FILES ${EMU_FILES} cores/np_nes_apu.c cores/np_nes_dmc.c)
	endif()
	if(SNDEMU_NESAPU_FDS)
		# Note: The FDS core can't work without an NES APU core.
		set(EMU_DEFS ${EMU_DEFS} " EC_NES_NSFP_FDS")
		set(EMU_FILES ${EMU_FILES} cores/np_nes_fds.c)
	endif()
endif()
if(SNDEMU_YMW258_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_YMW258")
	set(EMU_FILES ${EMU_FILES} cores/multipcm.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/multipcm.h)
endif()
if(SNDEMU_UPD7759_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_UPD7759")
	set(EMU_FILES ${EMU_FILES} cores/upd7759.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/upd7759.h)
endif()
if(SNDEMU_OKIM6258_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_OKIM6258")
	set(EMU_FILES ${EMU_FILES} cores/okim6258.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/okim6258.h)
endif()
if(SNDEMU_OKIM6295_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_OKIM6295")
	set(EMU_FILES ${EMU_FILES} cores/okim6295.c cores/okiadpcm.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/okim6295.h)
endif()
if(SNDEMU_K051649_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_K051649")
	set(EMU_FILES ${EMU_FILES} cores/k051649.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/k051649.h)
endif()
if(SNDEMU_K054539_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_K054539")
	set(EMU_FILES ${EMU_FILES} cores/k054539.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/k054539.h)
endif()
if(SNDEMU_C6280_MAME OR SNDEMU_C6280_OOTAKE)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_C6280")
	set(EMU_FILES ${EMU_FILES} cores/c6280intf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/c6280intf.h)
	if(SNDEMU_C6280_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_C6280_MAME")
		set(EMU_FILES ${EMU_FILES} cores/c6280_mame.c)
	endif()
	if(SNDEMU_C6280_OOTAKE)
		set(EMU_DEFS ${EMU_DEFS} " EC_C6280_OOTAKE")
		set(EMU_FILES ${EMU_FILES} cores/Ootake_PSG.c)
	endif()
endif()
if(SNDEMU_C140_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_C140")
	set(EMU_FILES ${EMU_FILES} cores/c140.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/c140.h)
endif()
if(SNDEMU_C219_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_C219")
	set(EMU_FILES ${EMU_FILES} cores/c219.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/c219.h)
endif()
if(SNDEMU_K053260_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_K053260")
	set(EMU_FILES ${EMU_FILES} cores/k053260.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/k053260.h)
endif()
if(SNDEMU_POKEY_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_POKEY")
	set(EMU_FILES ${EMU_FILES} cores/pokey.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/pokey.h)
endif()
if(SNDEMU_QSOUND_MAME OR SNDEMU_QSOUND_CTR)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_QSOUND")
	set(EMU_FILES ${EMU_FILES} cores/qsoundintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/qsoundintf.h)
	if(SNDEMU_QSOUND_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_QSOUND_MAME")
		set(EMU_FILES ${EMU_FILES} cores/qsound_mame.c)
	endif()
	if(SNDEMU_QSOUND_CTR)
		set(EMU_DEFS ${EMU_DEFS} " EC_QSOUND_CTR")
		set(EMU_FILES ${EMU_FILES} cores/qsound_ctr.c)
	endif()
endif()
if(SNDEMU_SCSP_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_SCSP")
	set(EMU_FILES ${EMU_FILES} cores/scsp.c cores/scspdsp.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/scsp.h)
endif()
if(SNDEMU_WSWAN_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_WSWAN")
	set(EMU_FILES ${EMU_FILES} cores/ws_audio.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/ws_audio.h)
endif()
if(SNDEMU_VBOY_VSU_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_VBOY_VSU")
	set(EMU_FILES ${EMU_FILES} cores/vsu.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/vsu.h)
endif()
if(SNDEMU_SAA1099_MAME OR SNDEMU_SAA1099_NRS OR SNDEMU_SAA1099_VB)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_SAA1099")
	set(EMU_FILES ${EMU_FILES} cores/saaintf.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/saaintf.h)
	if(SNDEMU_SAA1099_MAME)
		set(EMU_DEFS ${EMU_DEFS} " EC_SAA1099_MAME")
		set(EMU_FILES ${EMU_FILES} cores/saa1099_mame.c)
	endif()
	if(SNDEMU_SAA1099_NRS)
		set(EMU_DEFS ${EMU_DEFS} " EC_SAA1099_NRS")
		#set(EMU_FILES ${EMU_FILES} cores/saa1099_nrs.c)
	endif()
	if(SNDEMU_SAA1099_VB)
		set(EMU_DEFS ${EMU_DEFS} " EC_SAA1099_VB")
		set(EMU_FILES ${EMU_FILES} cores/saa1099_vb.c)
	endif()
endif()
if(SNDEMU_ES5503_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_ES5503")
	set(EMU_FILES ${EMU_FILES} cores/es5503.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/es5503.h)
endif()
if(SNDEMU_ES5506_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_ES5506")
	set(EMU_FILES ${EMU_FILES} cores/es5506.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/es5506.h)
endif()
if(SNDEMU_X1_010_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_X1_010")
	set(EMU_FILES ${EMU_FILES} cores/x1_010.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/x1_010.h)
endif()
if(SNDEMU_C352_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_C352")
	set(EMU_FILES ${EMU_FILES} cores/c352.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/c352.h)
endif()
if(SNDEMU_GA20_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_GA20")
	set(EMU_FILES ${EMU_FILES} cores/iremga20.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/iremga20.h)
endif()
if(SNDEMU_MIKEY_ALL)
	set(EMU_DEFS ${EMU_DEFS} " SNDDEV_MIKEY")
	set(EMU_FILES ${EMU_FILES} cores/mikey.c)
	set(EMU_CORE_HEADERS ${EMU_CORE_HEADERS} cores/mikey.h)
endif()


add_library(${PROJECT_NAME} ${LIBRARY_TYPE} ${EMU_FILES})
set_target_properties(${PROJECT_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)
target_compile_definitions(${PROJECT_NAME} PUBLIC ${EMU_DEFS})
target_include_directories(${PROJECT_NAME}
	PUBLIC $<BUILD_INTERFACE:${LIBVGM_SOURCE_DIR}> $<INSTALL_INTERFACE:${LIBVGM_INSTALL_INCLUDE_DIR}>
	PRIVATE ${LIBVGM_SOURCE_DIR}/libs/include
)

if(CMAKE_COMPILER_IS_GNUCC OR UNIX)
	# link Math library
	target_link_libraries(${PROJECT_NAME} PRIVATE m)
	set(EMU_PC_LDFLAGS "-lm")
endif()


pkgcfg_configure("${LIBVGM_SOURCE_DIR}/cmake/libvgm.pc.in" "${CMAKE_CURRENT_BINARY_DIR}/vgm-emu.pc"
		NAME "LibVGM Emu"
		DESC "LibVGM sound chip emulation library"
		VERSION ${LIBVGM_VERSION}
		DEFINES ${EMU_DEFS}
		CFLAGS ${EMU_PC_CFLAGS}
		LDFLAGS_PRIV ${EMU_PC_LDFLAGS}
		LDFLAGS_PUB "-l${PROJECT_NAME}"
	)

install(TARGETS ${PROJECT_NAME}
		EXPORT "${LIBVGM_NAME}"
		RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
		LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
	)
set(LIBVGM_INSTALL_TARGETS ${LIBVGM_INSTALL_TARGETS} "${PROJECT_NAME}" PARENT_SCOPE)
install(FILES ${EMU_HEADERS} DESTINATION "${LIBVGM_INSTALL_INCLUDE_DIR}/emu")
install(FILES ${EMU_CORE_HEADERS} DESTINATION "${LIBVGM_INSTALL_INCLUDE_DIR}/emu/cores")
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/vgm-emu.pc DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
